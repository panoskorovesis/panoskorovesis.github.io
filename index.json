
[{"content":"Feel free to take a look around.\n","date":"26 October 2024","externalUrl":null,"permalink":"/","section":"","summary":"Feel free to take a look around.","title":"","type":"page"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/tags/caddy/","section":"Tags","summary":"","title":"Caddy","type":"tags"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/categories/infrastructure/","section":"Categories","summary":"","title":"Infrastructure","type":"categories"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/tags/ollama/","section":"Tags","summary":"","title":"Ollama","type":"tags"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/authors/panos-korovesis/","section":"Authors","summary":"","title":"Panos Korovesis","type":"authors"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" Introduction üîé # The goal of this post is to create a self-hosted ollama server, used for deploying and testing open source LLMs locally.\nThe main issue is that by default, there is no password (or any other) protection for the ollama server. This means that if we were to deploy this in our server and then expose it to the internet, in order to access if from other machines, we would have an issue as anyone could use it simply with the url\nTo solve this we are going to see how we can set-up a dockerized ollama server with Caddy authentication for one user.\nThe entire project can be found in my github Deployment ‚úà # Starting the Ollama Server # Deploy our server we simply have to use the following command:\ndocker compose -f secure-ollama-server/docker-compose.yaml --env-file secure-ollama-server/.env up -d In case the machine we want to run ollama on has a gpu, we have to also use the docker-compose.gpu.yaml file. The command can be seen bellow docker compose -f secure-ollama-server/docker-compose.yaml -f secure-ollama-server/docker-compose.gpu.yaml --env-file secure-ollama-server/.env up -d Docker will take care of the rest Stopping the Ollama Server # To stop the server after we are finished using it, we have to use the following command:\ndocker compose -f secure-ollama-server/docker-compose.yaml --env-file secure-ollama-server/.env down How to use ‚ùî # In order to use the server, we have to add the username and the password we specified in the .env file in our request.\nAn example in curl can be seen bellow:\ncurl -u user:password 127.0.0.1:8200/api/generate -d \u0026#39;{\u0026#34;model\u0026#34; : \u0026#34;phi\u0026#34;, \u0026#34;prompt\u0026#34; : \u0026#34;Why is the sky blue?\u0026#34;, \u0026#34;stream\u0026#34; : false}\u0026#39; Using an incorrect password or user will result in an empty request response. Development üõ† # The following sections contain technical information about the implementation.\nEnviromental Variables # In order for the Caddy Authentication to work, we need to set up some enviromental variables.\nThose must be placed in a .env file, located in the same folder as the docker-compose.yaml\nWe can easily create this file by taking a look at the .env-template file. An example of our .env file is the following:\nCADDY_USERNAME=admin CADDY_PASSWORD=secret-password Docker # Now, let\u0026rsquo;s take a look at the docker-compose.yaml file:\nversion: \u0026#39;3.8\u0026#39; services: ollama: container_name: ollama-server build: context: . dockerfile: Dockerfile pull_policy: always tty: true restart: always ports: - 8200:80 volumes: - ./ollama:/root/.ollama environment: - CADDY_USERNAME=${CADDY_USERNAME} - CADDY_PASSWORD=${CADDY_PASSWORD} The ollama server is deployed on port 8200. There is a restart-always policy placed on the container. A volumne is required for persistence. The volume is created in the same folder as the docker-compose.yaml. Caddy enviromental variables are needed to set up the user and it\u0026rsquo;s password. Caddy Setup # Caddy is automatically configured for us by the Dockerfile. Let\u0026rsquo;s take a look to see how this is done.\nFROM ollama/ollama:latest # Update and install wget to download caddy RUN apt-get update \u0026amp;\u0026amp; apt-get install -y wget # Download and install caddy RUN wget --no-check-certificate https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_linux_amd64.tar.gz \\ \u0026amp;\u0026amp; tar -xvf caddy_2.7.6_linux_amd64.tar.gz \\ \u0026amp;\u0026amp; mv caddy /usr/bin/ \\ \u0026amp;\u0026amp; chown root:root /usr/bin/caddy \\ \u0026amp;\u0026amp; chmod 755 /usr/bin/caddy # Copy the Caddyfile to the container COPY Caddyfile /etc/caddy/Caddyfile # Set the environment variable for the ollama host ENV OLLAMA_HOST 0.0.0.0 # Expose the port that caddy will listen on EXPOSE 80 # Copy a script to start both ollama and caddy COPY start_server.sh /start_server.sh RUN chmod +x /start_server.sh # Set the entrypoint to the script ENTRYPOINT [\u0026#34;/start_server.sh\u0026#34;] We download the v2.7.6 version of the Caddy Server and install it. The appropriate permissions and onwerships are applied. The start_server.sh script is triggered at the end. The start_server.sh performs the following actions:\nChecks for the presence of the required Enviromental Variables Starts the Ollama server. Starts the Caddy server. Handles shutdown signals, in order for the container to exit grasefully. ","date":"26 October 2024","externalUrl":null,"permalink":"/posts/infrastructure/ollama_server/","section":"Posts","summary":"Deploy a secure ollama server using docker and Caddy for authentication","title":"Secure Self-Hosted Ollama Server","type":"posts"},{"content":"","date":"26 October 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"22 August 2021","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":" Google Summer of Code 2021 Work Product Submission # Introduction # Hello, my name is Panos Korovesis and during 2021 I was accepted in the Google Summer of Code program. I chose a project from LibreOffice and I worked under the mentorship of Toma≈æ Vajngerl and Miklos Vajna. The objective of the project was to complete the missing import/export tests of the SVM format and then separate the writing/reading functionality of the VCL Metafile to its own classes, in order to allow further refactoring of the VCL.\nTechnical Overview # This project can be broken down in five distinct phases.\nPhase One - Missing SVM Tests: This part included the completion of the commented out methods in svmtest.cxx. In some cases additions were required in mtfxmldump.cxx in order for the svm file to be produced. Phase Two - SvmReader: This part included the creation of a new class SvmReader.hxx in order to handle the reading functionality of the VCL. Reading is done with SvmReader::Read method, which works as follows: Sets up the stream, as was previously done in ReadGDIMetaFile For each MetaAction call the created MetaActionHandler The MetaActionHandler calls the appropriate read handler - which performs the reading - (e.g PixelHandler) for each MetaAction depending on the MetaActionType. The handlers are modified versions of the MetaAction::Read methods. Note: In order for the read handlers to work, Set methods had to be created for each MetaAct‚Äôs protected members (one can be seen here). Phase Three - SvmWriter: This part included the creation of a new class SvmWriter.hxx in order to handle the writing functionality of the VCL. Writing is done with SvmWriter::Write method, which works as follows: Sets up the stream, as was previously done in GDIMetaFile::Write For each MetaAction in the MetaFile, call the created MetaActionHandler The MetaActionHandler calls the appropriate write handler - which performs the writing - (e.g PointHandler) for each MetaAction depending on the MetaActionType. The handlers are modified versions of the MetaAction::Write methods. Phase Four - Replacing: The reading/writing was performed by four methods. Those are: GDIMetaFile::Read, GDIMetaFile::Write, ReadGDIMetaFile, WriteGDIMetaFile. Whereas the new functionality is performed by SvmWriter::Write and SvmReader::Read. This part included the replacement of the method calls of the methods mentioned above with the new ones (SvmWriter::Write, SvmReader::Read) Note: GDIMetaFile::GetChecksum had to be moved in SvmWriter because it was using the MetaAction::Write method. Phase Five - Cleanup: This part included the deletion of methods that were no longer in use. Those were: GDIMetaFile::Write GDIMetaFile::Read WriteGDIMetaFile ReadGDIMetaFile MetaAction::Write MetaAction::Read GDIMetaFile::GetChecksum Commits # A list with all the commits can be found at the bottom of this post\nSome important commits for each phase are listed below:\nPhase One The commits regarding this phase start from Add RefPoint cppunit test to vcl and end at Add FloatTransparent cppunit test to vcl.\nExample: Add Comment cppunit test to vcl\nFill the TestComment method with the required elements to be tested. They are then written in a .svm file in xml format Create a CheckComment method, which checks if the Comment attributes declared in the method above are the expected in the xml Modify mtfxmldump.cxx to format the xml output in the format we need Phase Two The commits regarding this phase start from Create Separate SvmReader class and end at Add Handler for MetaAction Read.\nExample: Create Separate SvmReader class\nCreate the required files for a new class and update the appropriate makefile Create a constructor Create the Read method. It sets up the stream and calls the MetaActionHandler. At this stage the MetaActionHandler uses the original read functionality (MetaAction::Read). The next commits start replacing it with the new one. Update svmtest.cxx in order to use SvmReader::Read instead of GDIMetaFile::Read Example: Add Handler for MetaPoint Read\nCreate the PointHandler Create Set methods for MetaPointAction private members, as they are required by the PointHandler Adjust the MetaActionHandler to call the PointHandler where needed. Thus, the new read functionality is used instead of the MetaPointAction::Read Phase Three The commits regarding this phase start from Create SvmWriter class and end at Add Handler for TextLineColor Write\nExample: Create SvmWriter class\nCreate the required files for a new class and update the appropriate makefile Create a constructor Create the MetaActionHandler and the ActionHandler which replaces MetaAction::Write. Create the Write method. It sets up the stream and calls the MetaActionHandler. At this stage the MetaActionHandler uses the original read functionality (MetaAction::Write) for all actions except MetaAction. The next commits continue replacing with the new one. Update svmtest.cxx in order to use SvmWriter::Write instead of GDIMetaFile::Write Example: Add Handler for Ellipse Write\nCreate the EllipseHandler Adjust the MetaActionHandler to call the EllipseHandler where needed. Thus, the new read functionality is used instead of the MetaPointAction::Write Phase Four The commits regarding this phase start with ‚ÄúReplace‚Äù\nExample: Replace ReadGDIMetaFile with Svmreader::Read\nRemoves the old method call\nCreates a SvmReader object and calls SvmReader::Read, thus replacing the old Read with the new\nNote: These steps are repeated for each file that needs replacing\nPhase Five The commits regarding this phase start with \u0026ldquo;Remove\u0026rdquo;. It also includes the commit Move GDIMetaFile::GetChecksum to SvmWriter::GetChecksum\nExample: Remove unused methods from gdimtf.hxx\nRemoves GDIMetaFile::Read\nRemoves GDIMetaFile::Write\nRemoves ReadGDIMetaFile\nRemoves WriteGDIMetaFile\nNote: This can be done, as the functionality of the removed methods is covered by SvmReader, SvmWriter.\nExample: Move GDIMetaFile::GetChecksum to SvmWriter::GetChecksum\nMoves the method to SvmWriter while applying any changes needed in order to be compatible\nRemoves the method from it\u0026rsquo;s initial location\nNote: This change was required as the method was using MetaAction::Write, which is replaced by the SvmWriter.\nNext Steps # The remaining steps for the completion of the project are\nGo through the tests of the svm format trying to find edge cases and if so, write tests for them Those steps do not need to be implemented by someone else however as I am determined to see this project to the end, even if it it goes beyond the GSoC Coding period.\nConclusion # Working at LibreOffice was a beautiful experience. Getting in touch with people all over the world while aiming at the same goal was something new for me, but definitely something I will seek in the future! I would also like to thank the dev community for it\u0026rsquo;s constant support on all my questions (silly or not) and especially my mentors Toma≈æ Vajngerl, Miklos Vajna for their continuous support as without them I would not be able to progress. Lastly, as I had a great experience, I plan to continue contributing to LibreOffice in the feature! Sere you all around!\nCommit List # All the commits regarding the project and thus listed below, have been successfully merged.\nThe commits are:\nhttps://gerrit.libreoffice.org/c/core/+/116780 https://gerrit.libreoffice.org/c/core/+/116819 https://gerrit.libreoffice.org/c/core/+/116967 https://gerrit.libreoffice.org/c/core/+/116959 https://gerrit.libreoffice.org/c/core/+/117153 https://gerrit.libreoffice.org/c/core/+/117232 https://gerrit.libreoffice.org/c/core/+/117245 https://gerrit.libreoffice.org/c/core/+/117155 https://gerrit.libreoffice.org/c/core/+/117368 https://gerrit.libreoffice.org/c/core/+/117575 https://gerrit.libreoffice.org/c/core/+/117702 https://gerrit.libreoffice.org/c/core/+/117694 https://gerrit.libreoffice.org/c/core/+/118143 https://gerrit.libreoffice.org/c/core/+/118275 https://gerrit.libreoffice.org/c/core/+/118217 https://gerrit.libreoffice.org/c/core/+/118396 https://gerrit.libreoffice.org/c/core/+/118398 https://gerrit.libreoffice.org/c/core/+/118399 https://gerrit.libreoffice.org/c/core/+/118403 https://gerrit.libreoffice.org/c/core/+/118433 https://gerrit.libreoffice.org/c/core/+/118473 https://gerrit.libreoffice.org/c/core/+/118545 https://gerrit.libreoffice.org/c/core/+/118550 https://gerrit.libreoffice.org/c/core/+/118565 https://gerrit.libreoffice.org/c/core/+/118566 https://gerrit.libreoffice.org/c/core/+/118598 https://gerrit.libreoffice.org/c/core/+/118608 https://gerrit.libreoffice.org/c/core/+/118610 https://gerrit.libreoffice.org/c/core/+/118633 https://gerrit.libreoffice.org/c/core/+/118636 https://gerrit.libreoffice.org/c/core/+/118637 https://gerrit.libreoffice.org/c/core/+/118653 https://gerrit.libreoffice.org/c/core/+/118665 https://gerrit.libreoffice.org/c/core/+/118667 https://gerrit.libreoffice.org/c/core/+/118672 https://gerrit.libreoffice.org/c/core/+/118673 https://gerrit.libreoffice.org/c/core/+/118674 https://gerrit.libreoffice.org/c/core/+/118677 https://gerrit.libreoffice.org/c/core/+/118698 https://gerrit.libreoffice.org/c/core/+/118829 https://gerrit.libreoffice.org/c/core/+/118833 https://gerrit.libreoffice.org/c/core/+/118834 https://gerrit.libreoffice.org/c/core/+/118836 https://gerrit.libreoffice.org/c/core/+/118830 https://gerrit.libreoffice.org/c/core/+/118837 https://gerrit.libreoffice.org/c/core/+/118845 https://gerrit.libreoffice.org/c/core/+/118892 https://gerrit.libreoffice.org/c/core/+/118894 https://gerrit.libreoffice.org/c/core/+/118895 https://gerrit.libreoffice.org/c/core/+/118896 https://gerrit.libreoffice.org/c/core/+/118955 https://gerrit.libreoffice.org/c/core/+/118956 https://gerrit.libreoffice.org/c/core/+/118957 https://gerrit.libreoffice.org/c/core/+/118967 https://gerrit.libreoffice.org/c/core/+/118968 https://gerrit.libreoffice.org/c/core/+/118979 https://gerrit.libreoffice.org/c/core/+/118980 https://gerrit.libreoffice.org/c/core/+/118981 https://gerrit.libreoffice.org/c/core/+/119092 https://gerrit.libreoffice.org/c/core/+/119170 https://gerrit.libreoffice.org/c/core/+/119171 https://gerrit.libreoffice.org/c/core/+/119192 https://gerrit.libreoffice.org/c/core/+/119193 https://gerrit.libreoffice.org/c/core/+/119194 https://gerrit.libreoffice.org/c/core/+/119537 https://gerrit.libreoffice.org/c/core/+/119538 https://gerrit.libreoffice.org/c/core/+/119539 https://gerrit.libreoffice.org/c/core/+/119541 https://gerrit.libreoffice.org/c/core/+/119580 https://gerrit.libreoffice.org/c/core/+/119591 https://gerrit.libreoffice.org/c/core/+/119592 https://gerrit.libreoffice.org/c/core/+/119593 https://gerrit.libreoffice.org/c/core/+/119594 https://gerrit.libreoffice.org/c/core/+/119733 https://gerrit.libreoffice.org/c/core/+/119734 https://gerrit.libreoffice.org/c/core/+/119735 https://gerrit.libreoffice.org/c/core/+/119736 https://gerrit.libreoffice.org/c/core/+/119737 https://gerrit.libreoffice.org/c/core/+/119738 https://gerrit.libreoffice.org/c/core/+/119846 https://gerrit.libreoffice.org/c/core/+/119898 https://gerrit.libreoffice.org/c/core/+/119899 https://gerrit.libreoffice.org/c/core/+/119900 https://gerrit.libreoffice.org/c/core/+/119901 https://gerrit.libreoffice.org/c/core/+/119902 https://gerrit.libreoffice.org/c/core/+/119903 https://gerrit.libreoffice.org/c/core/+/119920 https://gerrit.libreoffice.org/c/core/+/119921 https://gerrit.libreoffice.org/c/core/+/119922 https://gerrit.libreoffice.org/c/core/+/119923 https://gerrit.libreoffice.org/c/core/+/119924 https://gerrit.libreoffice.org/c/core/+/119925 https://gerrit.libreoffice.org/c/core/+/119963 https://gerrit.libreoffice.org/c/core/+/119964 https://gerrit.libreoffice.org/c/core/+/119965 https://gerrit.libreoffice.org/c/core/+/119966 https://gerrit.libreoffice.org/c/core/+/119967 https://gerrit.libreoffice.org/c/core/+/119968 https://gerrit.libreoffice.org/c/core/+/120106 https://gerrit.libreoffice.org/c/core/+/120107 https://gerrit.libreoffice.org/c/core/+/120108 https://gerrit.libreoffice.org/c/core/+/120109 https://gerrit.libreoffice.org/c/core/+/120110 https://gerrit.libreoffice.org/c/core/+/120111 https://gerrit.libreoffice.org/c/core/+/120153 https://gerrit.libreoffice.org/c/core/+/120154 https://gerrit.libreoffice.org/c/core/+/120155 https://gerrit.libreoffice.org/c/core/+/120156 https://gerrit.libreoffice.org/c/core/+/120157 https://gerrit.libreoffice.org/c/core/+/120158 https://gerrit.libreoffice.org/c/core/+/120256 https://gerrit.libreoffice.org/c/core/+/120257 https://gerrit.libreoffice.org/c/core/+/120258 https://gerrit.libreoffice.org/c/core/+/120259 https://gerrit.libreoffice.org/c/core/+/120263 https://gerrit.libreoffice.org/c/core/+/120264 https://gerrit.libreoffice.org/c/core/+/120306 https://gerrit.libreoffice.org/c/core/+/120307 https://gerrit.libreoffice.org/c/core/+/120308 https://gerrit.libreoffice.org/c/core/+/120309 https://gerrit.libreoffice.org/c/core/+/120312 https://gerrit.libreoffice.org/c/core/+/120313 https://gerrit.libreoffice.org/c/core/+/120349 https://gerrit.libreoffice.org/c/core/+/120350 https://gerrit.libreoffice.org/c/core/+/120351 https://gerrit.libreoffice.org/c/core/+/120372 https://gerrit.libreoffice.org/c/core/+/120376 https://gerrit.libreoffice.org/c/core/+/120408 https://gerrit.libreoffice.org/c/core/+/120409 https://gerrit.libreoffice.org/c/core/+/120414 https://gerrit.libreoffice.org/c/core/+/120471 ","date":"22 August 2021","externalUrl":null,"permalink":"/posts/gsoc/","section":"Posts","summary":"The work I have done this summer for LibreOffice is summarized here","title":"Google Summer of Code 2021 Paper","type":"posts"},{"content":"","date":"22 August 2021","externalUrl":null,"permalink":"/categories/gsoc/","section":"Categories","summary":"","title":"GSoC","type":"categories"},{"content":"","date":"22 August 2021","externalUrl":null,"permalink":"/categories/libreoffice/","section":"Categories","summary":"","title":"LibreOffice","type":"categories"},{"content":"","date":"5 August 2021","externalUrl":null,"permalink":"/categories/aboutme/","section":"Categories","summary":"","title":"Aboutme","type":"categories"},{"content":"","date":"5 August 2021","externalUrl":null,"permalink":"/tags/thoughts/","section":"Tags","summary":"","title":"Thoughts","type":"tags"},{"content":" Who am I # My name is Panos Korovesis and I am studying Computer Science at the National and Kapodistrian Univercity of Athens.\nI am currently contributing to LibreOffice with the Google Summer of Code 2021 program.\nMore information about my project can be found here\nYou can find/contact me on github and LinkedIn through the appointed buttons.\nWhat is this blog about # Think of the blog as a way for me to share what I\u0026rsquo;ve been up to!\nContent you might see:\nFun projects Interesting assignments Open source weekly progress updates Many more that I haven\u0026rsquo;t thought about yet Thanks for reading!\n","date":"5 August 2021","externalUrl":null,"permalink":"/posts/welcome/","section":"Posts","summary":"A few words about me","title":"Welcome","type":"posts"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]